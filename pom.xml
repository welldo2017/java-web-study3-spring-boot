<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.welldo</groupId>
    <artifactId>java-web-study3</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!--强烈推荐从spring-boot-starter-parent继承，因为这样就可以引入Spring Boot的预置配置。-->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.0.RELEASE</version>
    </parent>


    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <java.version>11</java.version>

        <pebble.version>3.1.2</pebble.version>
    </properties>

    <dependencies>
        <!--mvc相关-->
        <!--无需指定版本号，因为引入的<parent>内已经指定了-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- jdbc 相关-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>

        <!-- 集成Pebble View -->
        <dependency>
            <groupId>io.pebbletemplates</groupId>
            <artifactId>pebble-spring-boot-starter</artifactId>
            <version>${pebble.version}</version>
        </dependency>

        <!-- JDBC驱动 -->
        <!--hsqldb已在spring-boot-starter-jdbc中预置了版本号2.5.0-->
        <dependency>
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
        </dependency>


        <!-- 6.1 -->
        <!--开发者工具，可以监控classpath路径上的文件。只要源码或配置文件发生修改，Spring Boot应用可以自动重启。
        1.个人感觉，并不需要。
        2.并且，这个工具监控的是字节码的改动，所以，需要生效的话，有两种方式
            2.1 更改代码后，手动点击 compile/build（build是编译整个工程，compile是编译指定的模块）
            2.2 开启自动编译，但自动编译只在app未运行的状态下生效，所以还要
            press ctrl+shift+a then type "registry" and click on it.
            Then enable the option "compiler.automake.allow.when.app.running".
            开启在“app运行时也生效”
        -->
<!--
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
        </dependency>

    </dependencies>


    <build>
        <!--如果不喜欢默认的项目名+版本号作为文件名，可以加一个配置指定文件名：-->
        <finalName>awesome-app</finalName>

        <plugins>

            <!-- 6.2 -->
            <!--Spring Boot自带一个更简单的spring-boot-maven-plugin插件用来打包、
            xxx-1.0-SNAPSHOT.jar.original是Maven标准打包插件打的jar包，它只包含我们自己的Class，不包含依赖，
            xxx-jar-1.0-SNAPSHOT.jar是Spring Boot打包插件创建的包含依赖的jar，
            可以直接运行：
            java -jar springboot-exec-jar-1.0-SNAPSHOT.jar

            这样，部署一个Spring Boot应用就非常简单，无需预装任何服务器，只需要上传jar包即可。
            -->

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>




            <!-- 6.3 -->
            <!-- jar包瘦身插件
            缺点：包太大了，动不动几十MB

            项目中，我们引用到的Tomcat、Spring和其他第三方组件，基本不会变动，
            真正经常改动的代码其实是我们自己编写的代码。

            问题来了：如何只打包我们自己编写的代码，同时又自动把依赖包下载到某处，并自动引入到classpath中
            解决方案就是使用spring-boot-thin-launcher。

            原理：
            它输出的jar包只包含我们自己代码编译后的class，一个很小的ThinJarWrapper，以及解析pom.xml后得到的所有依赖jar的列表。
            它会先在 "指定目录" 搜索看看依赖的jar包是否都存在，
            如果不存在，先从Maven中央仓库下载到本地，然后，再执行我们自己编写的main()入口方法

            "指定目录":默认是用户主目录的.m2，我们也可以指定下载目录
             这里指定当前目录，java -Dthin.root=. -jar awesome-app.jar

             “预热”：
             下载所有依赖项，但并不会运行我们编写的main()方法。此过程称之为“预热”（warm up）。
             java -Dthin.dryrun=true -Dthin.root=. -jar awesome-app.jar

             -->
 <!--
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <dependencies>
                    <dependency>
                        <groupId>org.springframework.boot.experimental</groupId>
                        <artifactId>spring-boot-thin-layout</artifactId>
                        <version>1.0.27.RELEASE</version>
                    </dependency>
                </dependencies>
            </plugin>
-->

        </plugins>
    </build>


</project>